{
    "info": {
        "_postman_id": "f009abc8-b856-4db2-84fd-50217a64482b",
        "name": "Intro to writing tests - with examples",
        "description": "This collection contains examples of tests that you can use to automate your testing process.\n\n- Basic test syntax\n- API tests\n- Integration tests\n\n# Quick tips for writing tests\n- Organize your test scenarios by grouping your requests in [collections](https://www.getpostman.com/docs/v6/postman/collections/intro_to_collections) and [folders](https://www.getpostman.com/docs/v6/postman/collections/managing_collections#adding-folders), and naming them descriptively\n- Document your APIâ€™s requirements using [markdown in the descriptions](https://www.getpostman.com/docs/v6/postman/collections/using_markdown_for_descriptions)\n- Use [variables](https://www.getpostman.com/docs/v6/postman/environments_and_globals/variables) to simulate more sophisticated user flows\n- Common tests that will be run after every request can be added to collection-level tests or folder-level tests\n\n# Resources\nIf you're not already familiar with writing tests in Postman, check out these resources.\n* Postman docs: [Test scripts](https://www.getpostman.com/docs/v6/postman/scripts/test_scripts)\n* Postman docs: [Test examples](https://www.getpostman.com/docs/v6/postman/scripts/test_examples)\n* Community contribution: [Quick reference guide](https://community.getpostman.com/t/the-postman-cheatsheet-quick-reference-guide/1054)\n* Community contribution: [Examples and guides](https://github.com/DannyDainton/All-Things-Postman)\n* Postman blog: [Writing tests in Postman](http://blog.getpostman.com/2017/10/25/writing-tests-in-postman/)\n* Postman blog: [API testing tips from a Postman professional](http://blog.getpostman.com/2017/07/28/api-testing-tips-from-a-postman-professional/)",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Basic test syntax",
            "item": [
                {
                    "name": "Get all users",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "7fe7a173-1a36-43a1-bbe8-20e3cf555bc2",
                                "type": "text/javascript",
                                "exec": [
                                    "// use the `pm.*` API to write your test",
                                    "// the `pm.test()` method accepts 2 parameters",
                                    "// the first parameter is the name of your test (be descriptive)",
                                    "// the second parameter is a function whereby if any assertions within your function fail, then the test will fail",
                                    "",
                                    "pm.test(\"Name of the first test\", function () {",
                                    "    // make an assertion",
                                    "    // if your assertion throws an error, this test will fail",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Name of the second test\", function () {",
                                    "    // make as many assertions as you'd like as part of this test",
                                    "    // if any assertion throws an error, this test will fail",
                                    "    pm.response.to.have.status(200);",
                                    "    pm.response.to.be.ok;",
                                    "    pm.response.to.be.json;",
                                    "});",
                                    ""
                                ]
                            }
                        }
                    ],
                    "id": "5dac916e-9bc1-42eb-aba2-a927237e35f6",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get?all=true",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ],
                            "query": [
                                {
                                    "key": "all",
                                    "value": "true"
                                }
                            ]
                        },
                        "description": "Get all users in the system."
                    },
                    "response": [
                        {
                            "id": "00b5b8f7-5cbc-415a-8150-c793b8ccc76f",
                            "name": "Status",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
                                    "protocol": "https",
                                    "host": [
                                        "postman-echo",
                                        "com"
                                    ],
                                    "path": [
                                        "get"
                                    ],
                                    "query": [
                                        {
                                            "key": "foo1",
                                            "value": "bar1"
                                        },
                                        {
                                            "key": "foo2",
                                            "value": "bar2"
                                        }
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json; charset=utf-8",
                                    "enabled": true
                                },
                                {
                                    "key": "Date",
                                    "value": "Thu, 15 Nov 2018 22:21:20 GMT",
                                    "enabled": true
                                },
                                {
                                    "key": "ETag",
                                    "value": "W/\"1cd-LkUKVugbVYQuMcTU7OTzmp77cMo\"",
                                    "enabled": true
                                },
                                {
                                    "key": "Content-Length",
                                    "value": "348",
                                    "enabled": true
                                },
                                {
                                    "key": "Connection",
                                    "value": "keep-alive",
                                    "enabled": true
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "[\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n }\n]"
                        }
                    ]
                },
                {
                    "name": "Get all users",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "7fe7a173-1a36-43a1-bbe8-20e3cf555bc2",
                                "type": "text/javascript",
                                "exec": [
                                    "// Note the difference in the test failure message under the **Test Results** tab when using pm.response vs. pm.expect",
                                    "pm.test(\"Status code is 200 - pm.response\", function () {",
                                    "    pm.response.to.have.status(201); // written to fail",
                                    "});",
                                    "",
                                    "pm.test(\"Status code is 200 - pm.expect\", function () {",
                                    "    pm.expect(pm.response.code).to.equal(201); //written to fail",
                                    "});",
                                    "",
                                    "// Using a 2nd optional parameter with the pm.expect function to create a custom error message ",
                                    "pm.test(\"Using a custom error message\", function () {",
                                    "    pm.expect(false, 'nooo why fail??').to.be.ok;",
                                    "});",
                                    ""
                                ]
                            }
                        }
                    ],
                    "id": "85b41c66-6713-4513-bc8e-7a4e90dc6f91",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get?all=true",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ],
                            "query": [
                                {
                                    "key": "all",
                                    "value": "true"
                                }
                            ]
                        },
                        "description": "Get all users in the system."
                    },
                    "response": [
                        {
                            "id": "fa37672f-d8e9-4833-8c41-46f2917e4fa1",
                            "name": "Status",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
                                    "protocol": "https",
                                    "host": [
                                        "postman-echo",
                                        "com"
                                    ],
                                    "path": [
                                        "get"
                                    ],
                                    "query": [
                                        {
                                            "key": "foo1",
                                            "value": "bar1"
                                        },
                                        {
                                            "key": "foo2",
                                            "value": "bar2"
                                        }
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json; charset=utf-8",
                                    "enabled": true
                                },
                                {
                                    "key": "Date",
                                    "value": "Thu, 15 Nov 2018 22:21:20 GMT",
                                    "enabled": true
                                },
                                {
                                    "key": "ETag",
                                    "value": "W/\"1cd-LkUKVugbVYQuMcTU7OTzmp77cMo\"",
                                    "enabled": true
                                },
                                {
                                    "key": "Content-Length",
                                    "value": "348",
                                    "enabled": true
                                },
                                {
                                    "key": "Connection",
                                    "value": "keep-alive",
                                    "enabled": true
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "[\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n }\n]"
                        }
                    ]
                }
            ],
            "id": "0942b7ed-0a86-464e-8aa4-72671f8a1a44",
            "description": "Oh goody. Did you ever think you would get so excited to read this section title?\n\nThe [Postman Sandbox](https://www.getpostman.com/docs/v6/postman/scripts/postman_sandbox) is a JavaScript execution environment that is accessible during pre-request scripts and test scripts. Whatever code you write under the pre-request and test tabs is executed in this sandbox.\n\nAny code that you write under the **Tests** tab in the Postman app will execute after your request. Consequently you have access to the `pm.response` object to make assertions against the actual response -- this is what we call a Postman test.\n\nReview the example tests under the **Tests** tab in the Postman app.\n\n> **Quick tips for syntax**\n- Give each test a descriptive name. When the test fails, this will provide context to the error.\n- Use `pm.response()` as your base assertion where possible to provide more descriptive error messages.\n- Use the optional 2nd parameter in `pm.expect()` to create custom error messages.",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "051b4289-2f0a-4ed6-9686-09e97619d7d4",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "11ba2c70-036c-4df5-8f8e-64ad86feecbc",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "API tests",
            "item": [
                {
                    "name": "Get all users",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "7fe7a173-1a36-43a1-bbe8-20e3cf555bc2",
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"response is ok\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    ""
                                ]
                            }
                        }
                    ],
                    "id": "b257b8ce-ba57-4f5a-b909-4dc6b04f28c8",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get?all=true",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ],
                            "query": [
                                {
                                    "key": "all",
                                    "value": "true"
                                }
                            ]
                        },
                        "description": "Get all users in the system."
                    },
                    "response": [
                        {
                            "id": "d5b3fac2-aad8-4be5-ab0e-49a48bbf92f3",
                            "name": "Status",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
                                    "protocol": "https",
                                    "host": [
                                        "postman-echo",
                                        "com"
                                    ],
                                    "path": [
                                        "get"
                                    ],
                                    "query": [
                                        {
                                            "key": "foo1",
                                            "value": "bar1"
                                        },
                                        {
                                            "key": "foo2",
                                            "value": "bar2"
                                        }
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json; charset=utf-8",
                                    "enabled": true
                                },
                                {
                                    "key": "Date",
                                    "value": "Thu, 15 Nov 2018 22:21:20 GMT",
                                    "enabled": true
                                },
                                {
                                    "key": "ETag",
                                    "value": "W/\"1cd-LkUKVugbVYQuMcTU7OTzmp77cMo\"",
                                    "enabled": true
                                },
                                {
                                    "key": "Content-Length",
                                    "value": "348",
                                    "enabled": true
                                },
                                {
                                    "key": "Connection",
                                    "value": "keep-alive",
                                    "enabled": true
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "[\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n }\n]"
                        }
                    ]
                },
                {
                    "name": "Delete user",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "ab36a04d-50b5-4350-b343-4f5e1fdbafe0",
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"response is ok\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "let jsonResponse = pm.response.json();",
                                    "",
                                    "pm.test(\"Response should be a parsable JSON\", function() {",
                                    "    pm.expect(jsonResponse).to.be.ok;",
                                    "});",
                                    "",
                                    "pm.test(\"Response body should be an object\", function() {",
                                    "    pm.expect(jsonResponse).to.be.an('object');",
                                    "});",
                                    "",
                                    "pm.test(\"Response body should be in the correct format\", function() {",
                                    "    pm.expect(jsonResponse.args).to.be.a('object');",
                                    "    pm.expect(jsonResponse.data).to.be.a('string');",
                                    "    pm.expect(jsonResponse.files).to.be.a('object');",
                                    "    pm.expect(jsonResponse.form).to.be.a('object');",
                                    "    pm.expect(jsonResponse.headers).to.be.a('object');",
                                    "});",
                                    "",
                                    ""
                                ]
                            }
                        }
                    ],
                    "id": "2c8bce6f-8220-465f-80e8-c45e920e3a7f",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/delete?id={{id}}",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "delete"
                            ],
                            "query": [
                                {
                                    "key": "id",
                                    "value": "{{id}}"
                                }
                            ]
                        },
                        "description": "Deletes a user from the system by `id`."
                    },
                    "response": [
                        {
                            "id": "8fd8e9d7-d114-448d-94f8-218db0e82cd4",
                            "name": "Functional2",
                            "originalRequest": {
                                "method": "DELETE",
                                "header": [],
                                "body": {
                                    "mode": "raw",
                                    "raw": "This is expected to be sent back as part of response body."
                                },
                                "url": {
                                    "raw": "https://postman-echo.com/delete",
                                    "protocol": "https",
                                    "host": [
                                        "postman-echo",
                                        "com"
                                    ],
                                    "path": [
                                        "delete"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json; charset=utf-8",
                                    "enabled": true
                                },
                                {
                                    "key": "Date",
                                    "value": "Thu, 15 Nov 2018 22:22:22 GMT",
                                    "enabled": true
                                },
                                {
                                    "key": "ETag",
                                    "value": "W/\"236-unqr/LuiPP07B85WHuciASf+YdA\"",
                                    "enabled": true
                                },
                                {
                                    "key": "Content-Length",
                                    "value": "415",
                                    "enabled": true
                                },
                                {
                                    "key": "Connection",
                                    "value": "keep-alive",
                                    "enabled": true
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\n \"args\": {},\n \"data\": \"This is expected to be sent back as part of response body.\",\n \"files\": {},\n \"form\": {},\n \"headers\": {\n  \"x-forwarded-proto\": \"https\",\n  \"host\": \"postman-echo.com\",\n  \"content-length\": \"58\",\n  \"accept\": \"*/*\",\n  \"accept-encoding\": \"gzip, deflate\",\n  \"cache-control\": \"no-cache\",\n  \"content-type\": \"text/plain\",\n  \"cookie\": \"sails.sid=s%3AG3Skk-KwKzhuN9bCFLG38XDvX_n76FY7.SnEQNLnssVB0vIWq0%2Bqn%2FoZhMdvJqAp6Toc8YMDlMhw\",\n  \"postman-token\": \"a26a6cbb-abb4-4e8b-8a1e-4ba63450afcb\",\n  \"user-agent\": \"PostmanRuntime/7.3.0\",\n  \"x-forwarded-port\": \"443\"\n },\n \"json\": null,\n \"url\": \"https://postman-echo.com/delete\",\n \"status\": \"sunt\",\n \"id\": \"Excepteur id culpa\"\n}"
                        }
                    ]
                },
                {
                    "name": "Get all users",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "7fe7a173-1a36-43a1-bbe8-20e3cf555bc2",
                                "type": "text/javascript",
                                "exec": [
                                    "var schema = {",
                                    "  \"items\": {",
                                    "    \"type\": \"boolean\"",
                                    "  }",
                                    "};",
                                    "",
                                    "var data1 = [true, false];",
                                    "var data2 = [true, 123];",
                                    "",
                                    "pm.test('Schema is valid', function() {",
                                    "  pm.expect(tv4.validate(data1, schema)).to.be.true;",
                                    "//   pm.expect(tv4.validate(data2, schema)).to.be.true; // this statement would not be true",
                                    "});",
                                    ""
                                ]
                            }
                        }
                    ],
                    "id": "290e9453-7056-4ca6-8292-e979fa42b6b2",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get?all=true",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ],
                            "query": [
                                {
                                    "key": "all",
                                    "value": "true"
                                }
                            ]
                        },
                        "description": "Get all users in the system."
                    },
                    "response": [
                        {
                            "id": "66d17693-5155-4ec7-8868-e0bcd5fc0420",
                            "name": "JSON schema v4",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
                                    "protocol": "https",
                                    "host": [
                                        "postman-echo",
                                        "com"
                                    ],
                                    "path": [
                                        "get"
                                    ],
                                    "query": [
                                        {
                                            "key": "foo1",
                                            "value": "bar1"
                                        },
                                        {
                                            "key": "foo2",
                                            "value": "bar2"
                                        }
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "Text",
                            "header": [
                                {
                                    "key": "Content-Type",
                                    "value": "application/json; charset=utf-8",
                                    "enabled": true
                                },
                                {
                                    "key": "Date",
                                    "value": "Thu, 15 Nov 2018 22:26:56 GMT",
                                    "enabled": true
                                },
                                {
                                    "key": "ETag",
                                    "value": "W/\"1c7-KZYP4szBTzxKQXHzZuUzeRc6eu8\"",
                                    "enabled": true
                                },
                                {
                                    "key": "Content-Length",
                                    "value": "342",
                                    "enabled": true
                                },
                                {
                                    "key": "Connection",
                                    "value": "keep-alive",
                                    "enabled": true
                                }
                            ],
                            "cookie": [],
                            "responseTime": null,
                            "body": "[\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n }\n]"
                        }
                    ]
                }
            ],
            "id": "fdc592cf-3a1d-47f9-97ad-c9d0aa7fca95",
            "description": "This folder contains examples of testing a single HTTP API request.\n\nIn the Postman app, under the **Tests** tab of the request builder for each request, notice the test(s) written to validate specific assertions. Some of these tests are available as a SNIPPET on the right sidebar.\n\nSend each request to see the results under the **Tests** tab in the response viewer.",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "98994d2e-261d-49a0-9d13-0832a97eeaf9",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "4eeee8f4-3096-4f28-a069-2bf8ed1b208c",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "Integration tests",
            "item": [
                {
                    "name": "Using variables",
                    "item": [
                        {
                            "name": "Get all users",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "7fe7a173-1a36-43a1-bbe8-20e3cf555bc2",
                                        "type": "text/javascript",
                                        "exec": [
                                            "pm.test(\"response is ok\", function () {",
                                            "    pm.response.to.have.status(200);",
                                            "});",
                                            ""
                                        ]
                                    }
                                }
                            ],
                            "id": "0c9eb253-34f9-4905-b7db-c3f48948761e",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "https://postman-echo.com/get?all=true",
                                    "protocol": "https",
                                    "host": [
                                        "postman-echo",
                                        "com"
                                    ],
                                    "path": [
                                        "get"
                                    ],
                                    "query": [
                                        {
                                            "key": "all",
                                            "value": "true"
                                        }
                                    ]
                                },
                                "description": "Get all users in the system."
                            },
                            "response": [
                                {
                                    "id": "490e74d0-969f-44e9-b60b-a4447b2206ec",
                                    "name": "Status",
                                    "originalRequest": {
                                        "method": "GET",
                                        "header": [],
                                        "url": {
                                            "raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
                                            "protocol": "https",
                                            "host": [
                                                "postman-echo",
                                                "com"
                                            ],
                                            "path": [
                                                "get"
                                            ],
                                            "query": [
                                                {
                                                    "key": "foo1",
                                                    "value": "bar1"
                                                },
                                                {
                                                    "key": "foo2",
                                                    "value": "bar2"
                                                }
                                            ]
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "_postman_previewlanguage": "Text",
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json; charset=utf-8",
                                            "enabled": true
                                        },
                                        {
                                            "key": "Date",
                                            "value": "Thu, 15 Nov 2018 22:21:20 GMT",
                                            "enabled": true
                                        },
                                        {
                                            "key": "ETag",
                                            "value": "W/\"1cd-LkUKVugbVYQuMcTU7OTzmp77cMo\"",
                                            "enabled": true
                                        },
                                        {
                                            "key": "Content-Length",
                                            "value": "348",
                                            "enabled": true
                                        },
                                        {
                                            "key": "Connection",
                                            "value": "keep-alive",
                                            "enabled": true
                                        }
                                    ],
                                    "cookie": [],
                                    "responseTime": null,
                                    "body": "[\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n }\n]"
                                }
                            ]
                        }
                    ],
                    "id": "a6379de3-e850-4fc5-a637-a39c8e96dd36",
                    "description": "The 2 requests in this sub-folder demonstrate how you can use variables to save information that can be used in subsequent requests. Let's see how to do this with an [environment variable](https://www.getpostman.com/docs/v6/postman/environments_and_globals/intro_to_environments_and_globals).\n\n### Considerations for using variables\nIf you're planning to automate your testing and / or run your test suite as part of your Continuous Integration / Continuous Delivery (CI/CD) pipeline, there's some considerations for how you handle your [variables](https://www.getpostman.com/docs/v6/postman/environments_and_globals/variables).\n\n![[variable scopes](https://i.imgur.com/cQFnvSZ.png)](https://i.imgur.com/cQFnvSZ.png)\n\n* [Local variables](https://community.getpostman.com/t/the-postman-cheatsheet-quick-reference-guide/1054/7?u=joyce) can be used to save a temporary state within a request and also throughout a collection run. Using a local variable means you won't have to unset the variable during teardown or pollute your namespace.\n* [Environment variables](https://www.getpostman.com/docs/v6/postman/environments_and_globals/manage_environments) are portable and can be used to store server configuration elements. In this way, you can easily swap out the configuration for your staging environment with your production environment when necessary.\n* [Collection variables](https://www.getpostman.com/docs/v6/postman/environments_and_globals/variables#defining-collection-variables) are specific to a single collection.\n* [Global variables](https://www.getpostman.com/docs/v6/postman/environments_and_globals/manage_globals) are specific to a single workspace. In a personal workspace, your `username` might never change. In a team workspace, you might have dummy user credentials that are shared across the team.\n* [Session variables](https://www.getpostman.com/docs/v6/postman/environments_and_globals/sessions) are available for global, collection, and environment variables to maintain variable values within your current session. In this way, you can keep your mutations private and not overwrite any team values.\n\n### Persisting variable values\nVariables can be used to save and update a value throughout a collection run. What if you want to use variables to save state across different runs of the same collection?\n\nSay you want to save the highest ranked player on a leaderboard as an environment value. The behavior of persisting variable values after a collection has been run may differ depending on how you run your collection.\n\n* In the Postman app [collection runner](https://www.getpostman.com/docs/v6/postman/collection_runs/intro_to_collection_runs), the default setting is that variables are NOT persisted. That means at the end of a collection run, any variable values that you updated throughout the collection run will be reset to their initial values. There is a checkbox to `Keep variable values` that you can select as an option in the collection runner window before you run the collection.\n* With [Newman](https://www.getpostman.com/docs/v6/postman/collection_runs/command_line_integration_with_newman) and [Postman monitors](https://www.getpostman.com/docs/v6/postman/monitors/intro_monitors), the default setting is that variables are NOT persisted. In this case, there's no built-in option to persist your values. However, you can use the [Postman API](https://docs.api.getpostman.com/) to [update your environment](https://docs.api.getpostman.com/#6517e0d6-3bc3-3da5-ab57-7a578a8504ce), running this request as part of your collection.",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "95c9c1f0-284e-4952-9480-adc87bd9f663",
                                "type": "text/javascript",
                                "exec": [
                                    ""
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "959d8747-af6e-4500-b2a9-928a1d34392c",
                                "type": "text/javascript",
                                "exec": [
                                    ""
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Scenario",
                    "item": [],
                    "id": "49b9168b-0c51-4df2-8aa8-297b53e85dd1",
                    "description": "The requests in this sub-folder demonstrate how your scenario tests can be structured.\n\nExecuting the requests in this folder runs your API tests sequentially mirroring typical user behavior. \n\n# Control your workflow\nYou can also use the `postman.setNextRequest()` method to [control your workflow](https://www.getpostman.com/docs/v6/postman/scripts/branching_and_looping) and create more sophisticated testing logic.",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "a95ec91b-98a1-447d-b3f0-74800b5c4fc8",
                                "type": "text/javascript",
                                "exec": [
                                    ""
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "2fb3d4ce-9e18-4b51-bcd3-bf187098058b",
                                "type": "text/javascript",
                                "exec": [
                                    ""
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Service Consumer â†’ Service Provider #contract",
                    "item": [
                        {
                            "name": "Setup",
                            "item": [],
                            "id": "2c5d2dc9-ad98-4aa8-b10d-23dc9d46cc69",
                            "description": "Sometimes you need to do some initial groundwork to prepare your test environment for your test cases. Perhaps you're generating new users, creating authentication tokens, or simply initializing variables.\n\nYou can handle setup and teardown as separate requests occurring respectively before and after your tests. You can also handle setup and teardown for _each_ request as pre-request or test scripts.",
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "5587cb78-a4e5-4423-8119-f33311f9bc8e",
                                        "type": "text/javascript",
                                        "exec": [
                                            ""
                                        ]
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "b757dfe5-789b-4bc9-acaa-d3b0aefebbbf",
                                        "type": "text/javascript",
                                        "exec": [
                                            ""
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            "name": "Tests",
                            "item": [],
                            "id": "09240695-2bfd-4762-abfa-da0e9c7764ff",
                            "description": "Automating the setup and teardown allows you to quickly re-create your test conditions in a consistent way so that you can repeat your tests. Creating repeatable tests allows you to more efficiently tweak other variables, isolate the system under test, and observe the results in a scalable manner.",
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "cbf0a702-faed-42a7-b31c-9f317a78048a",
                                        "type": "text/javascript",
                                        "exec": [
                                            ""
                                        ]
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "a185452f-8816-44e1-be6d-26a3709841f6",
                                        "type": "text/javascript",
                                        "exec": [
                                            ""
                                        ]
                                    }
                                }
                            ]
                        },
                        {
                            "name": "Teardown",
                            "item": [],
                            "id": "7132a9d3-2334-42a5-bccf-305b7114155e",
                            "description": "After your tests run, you may need to clean up the test conditions, so that you're not littering new users, records, and other side effects throughout your test environment.\n\nThe requests in this folder are just examples of cleaning up your test environment. You can't actually delete users or sessions in this example.",
                            "event": [
                                {
                                    "listen": "prerequest",
                                    "script": {
                                        "id": "901c934f-d195-416a-a0dd-3b6bbb1ba9dc",
                                        "type": "text/javascript",
                                        "exec": [
                                            ""
                                        ]
                                    }
                                },
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "32e431d3-2c88-4724-9db5-36b2d601acfb",
                                        "type": "text/javascript",
                                        "exec": [
                                            ""
                                        ]
                                    }
                                }
                            ]
                        }
                    ],
                    "id": "833816cc-0a19-4227-a28b-c3b79b8b7ab8",
                    "description": "The requests in this folder are from a [NodeJS API](https://github.com/auth0-blog/nodejs-jwt-authentication-sample) that supports username and password authentication with JWTs and has APIs that return Chuck Norris phrases. \n\n---\n\nNaming a collection or folder with `#contract` or `#integration` allows you to programmatically parse the tests that should be run in different circumstances, when used in conjunction with the [Postman API](https://docs.api.getpostman.com/).\n\n# Using workspaces for automation\nUse workspaces to organize your services, and also to group together collections of tests that must be passed when deploying new code to the next server environment. Use the [Postman API](https://docs.api.getpostman.com/) to fetch a workspace along with all the collections and environments associated with that workspace and create a programmatic solution. \n\nHere's one way the Postman team uses collections and workspaces for automation:\n\n1. Create a collection of validation tests for the provider service. This can include contract validation tests driven by the consumers who are dependent on this service. This can also include integration tests to ensure more complex scenarios involving other components aren't broken when deploying new code.\n2. The name of the collection can include a tag indicating when these tests should be executed (e.g. #contract or #integration). The collection can be shared to the workspace of the provider service. Alternatively, a new workspace can be created (e.g. Continuous Integration) containing all the collections of tests that you care about in the specified circumstances.\n3. Use the [Postman API](https://docs.api.getpostman.com/) to `GET` all the collections and environments associated with your workspace. Parse the entities to discern which collections should be run in the specified circumstances.\n\n# Setup and teardown\nNotice the nested folders are organized according to Setup, Tests, and Teardown. Automating the setup and teardown steps allows you to quickly re-create your test conditions in a consistent way so that you can repeat your tests quickly and easily.\n",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "f1a41636-4fe3-454d-8451-d393da512651",
                                "type": "text/javascript",
                                "exec": [
                                    ""
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "1f65ab5a-18e1-40f4-8c2f-421f0bcacab6",
                                "type": "text/javascript",
                                "exec": [
                                    ""
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Using mocks",
                    "item": [
                        {
                            "name": "Get all users",
                            "event": [
                                {
                                    "listen": "test",
                                    "script": {
                                        "id": "7fe7a173-1a36-43a1-bbe8-20e3cf555bc2",
                                        "type": "text/javascript",
                                        "exec": [
                                            "pm.test(\"response is ok\", function () {",
                                            "    pm.response.to.have.status(200);",
                                            "});",
                                            ""
                                        ]
                                    }
                                }
                            ],
                            "id": "5b80df79-346c-4878-a072-2adbe2a79e49",
                            "protocolProfileBehavior": {
                                "disableBodyPruning": true
                            },
                            "request": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "https://postman-echo.com/get?all=true",
                                    "protocol": "https",
                                    "host": [
                                        "postman-echo",
                                        "com"
                                    ],
                                    "path": [
                                        "get"
                                    ],
                                    "query": [
                                        {
                                            "key": "all",
                                            "value": "true"
                                        }
                                    ]
                                },
                                "description": "Get all users in the system."
                            },
                            "response": [
                                {
                                    "id": "0ae88be4-4bd9-49c5-b79e-b3e16e5cfc31",
                                    "name": "Status",
                                    "originalRequest": {
                                        "method": "GET",
                                        "header": [],
                                        "url": {
                                            "raw": "https://postman-echo.com/get?foo1=bar1&foo2=bar2",
                                            "protocol": "https",
                                            "host": [
                                                "postman-echo",
                                                "com"
                                            ],
                                            "path": [
                                                "get"
                                            ],
                                            "query": [
                                                {
                                                    "key": "foo1",
                                                    "value": "bar1"
                                                },
                                                {
                                                    "key": "foo2",
                                                    "value": "bar2"
                                                }
                                            ]
                                        }
                                    },
                                    "status": "OK",
                                    "code": 200,
                                    "_postman_previewlanguage": "Text",
                                    "header": [
                                        {
                                            "key": "Content-Type",
                                            "value": "application/json; charset=utf-8",
                                            "enabled": true
                                        },
                                        {
                                            "key": "Date",
                                            "value": "Thu, 15 Nov 2018 22:21:20 GMT",
                                            "enabled": true
                                        },
                                        {
                                            "key": "ETag",
                                            "value": "W/\"1cd-LkUKVugbVYQuMcTU7OTzmp77cMo\"",
                                            "enabled": true
                                        },
                                        {
                                            "key": "Content-Length",
                                            "value": "348",
                                            "enabled": true
                                        },
                                        {
                                            "key": "Connection",
                                            "value": "keep-alive",
                                            "enabled": true
                                        }
                                    ],
                                    "cookie": [],
                                    "responseTime": null,
                                    "body": "[\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n },\n {\n  \"status\": \"success\"\n }\n]"
                                }
                            ]
                        }
                    ],
                    "id": "99f8a87f-7e80-4014-83b5-1970602320c1",
                    "description": "[Mocking an endpoint](https://medium.com/postman-engineering/https-medium-com-postman-engineering-fake-it-till-you-make-it-mocks-for-agile-development-f4d050cad694) allows you to simulate external or internal dependencies so that you can isolate the system under test. It also allows you to mock certeain error conditions that may be difficult or problematic to re-create in a production environment\n\nThe first request in this folder mocks an external endpoint. We previously reviewed an example using the [Coindesk API](https://www.coindesk.com/api/). Instead of making a request to the Coindesk API, we will rely on a mock response from the Postman cloud.",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "id": "b96ef6c3-eae2-4da9-9ed8-0800485b0b11",
                                "type": "text/javascript",
                                "exec": [
                                    ""
                                ]
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "id": "bc877c3a-ae77-4058-a0dd-59650816c0cd",
                                "type": "text/javascript",
                                "exec": [
                                    ""
                                ]
                            }
                        }
                    ]
                }
            ],
            "id": "c471d5fc-275b-49d4-858f-036ac9ce04b3",
            "description": "Knowing how your endpoints interact with other systems is an important part of testing.\n\n# Automating your tests in Postman\nNow that you've written automated tests, there's a few ways to execute your tests.\n* From the Postman app with [the collection runner](https://www.getpostman.com/docs/v6/postman/collection_runs/starting_a_collection_run)\n* From the Postman cloud with [a scheduled monitor](https://www.getpostman.com/docs/v6/postman/monitors/intro_monitors)\n* From the command line or as part of a CI/CD pipeline [with Newman](http://blog.getpostman.com/2018/06/21/newman-run-and-test-your-collections-from-the-command-line/)\n\n![[newman gif](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/newmanEcho.gif)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/newmanEcho.gif)\n\n# Other helpful tools\nThere are a number of tools for visualizing your test results. When a test fails, you can drill down to debug and isolate the issues.\n* Console [to visualize network calls and log statements](https://www.getpostman.com/docs/v6/postman/sending_api_requests/debugging_and_logs#network-calls-with-postman-console)\n* Similar [console for monitors](https://www.getpostman.com/docs/v6/postman/monitors/troubleshooting_monitors)\n* [Viewing monitor results](https://www.getpostman.com/docs/v6/postman/monitors/viewing_monitor_results) and [receiving alerts for failures](https://www.getpostman.com/docs/v6/postman/monitors/integrations_for_alerts)\n* Common [reporters for Newman output](https://github.com/postmanlabs/newman#reporters)\n* [Mock services](https://medium.com/postman-engineering/https-medium-com-postman-engineering-fake-it-till-you-make-it-mocks-for-agile-development-f4d050cad694) for isolating dependencies\n",
            "event": [
                {
                    "listen": "prerequest",
                    "script": {
                        "id": "3aa52219-faa5-4dd2-9415-ff026847c5c3",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                },
                {
                    "listen": "test",
                    "script": {
                        "id": "4cb520ef-ff26-47a3-b707-a4beaa8d4252",
                        "type": "text/javascript",
                        "exec": [
                            ""
                        ]
                    }
                }
            ]
        },
        {
            "name": "New",
            "id": "6065addb-690f-4f25-8494-eec09e48b69d",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/x-www-form-urlencoded"
                    }
                ],
                "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                        {
                            "description": "(Required) The user's first name (required)",
                            "key": "firstName",
                            "value": "pariatur deserunt ven"
                        },
                        {
                            "description": "(Required) The user's last name (required)",
                            "key": "lastName",
                            "value": "in fugiat veniam minim"
                        },
                        {
                            "description": "(Required) The user's password (required)",
                            "key": "password",
                            "value": "elit ad"
                        }
                    ]
                },
                "url": {
                    "raw": "{{baseUrl}}/create",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "create"
                    ]
                },
                "description": "Creates a new user in the system. The user will be assigned an ID automatically. This can be found in the response."
            },
            "response": []
        },
        {
            "name": "Update user",
            "id": "29732372-5105-4073-b1d1-c1f040a5f6b4",
            "request": {
                "method": "PUT",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/x-www-form-urlencoded"
                    }
                ],
                "body": {
                    "mode": "urlencoded",
                    "urlencoded": [
                        {
                            "description": "(Required) The user's new first name",
                            "key": "firstName",
                            "value": "elit velit"
                        }
                    ]
                },
                "url": {
                    "raw": "{{baseUrl}}/update?id=dolor amet",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "update"
                    ],
                    "query": [
                        {
                            "description": "(Required) The user&#39;s ID (required)",
                            "key": "id",
                            "value": "dolor amet"
                        }
                    ]
                },
                "description": "Send the keys that you'd like to update, this can be one or more of `firstName`, `lastName` and `password`."
            },
            "response": [
                {
                    "id": "948e2040-14ab-4353-958e-cd955b171e08",
                    "name": "response",
                    "originalRequest": {
                        "method": "PUT",
                        "header": [
                            {
                                "description": "(Required) ",
                                "key": "Content-Type",
                                "value": "application/x-www-form-urlencoded"
                            }
                        ],
                        "body": {
                            "mode": "urlencoded",
                            "urlencoded": [
                                {
                                    "description": "(Required) The user's new first name",
                                    "key": "firstName",
                                    "value": "Benjamin"
                                }
                            ]
                        },
                        "url": {
                            "raw": "{{baseUrl}}/update?id={{id}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "update"
                            ],
                            "query": [
                                {
                                    "key": "id",
                                    "value": "{{id}}"
                                }
                            ]
                        }
                    },
                    "status": "OK",
                    "code": 200,
                    "_postman_previewlanguage": "Text",
                    "header": [
                        {
                            "disabled": false,
                            "description": {
                                "content": "",
                                "type": "text/plain"
                            },
                            "key": "X-Powered-By",
                            "value": ""
                        },
                        {
                            "disabled": false,
                            "description": {
                                "content": "",
                                "type": "text/plain"
                            },
                            "key": "Content-Length",
                            "value": ""
                        },
                        {
                            "disabled": false,
                            "description": {
                                "content": "",
                                "type": "text/plain"
                            },
                            "key": "ETag",
                            "value": ""
                        },
                        {
                            "disabled": false,
                            "description": {
                                "content": "",
                                "type": "text/plain"
                            },
                            "key": "Date",
                            "value": ""
                        },
                        {
                            "disabled": false,
                            "description": {
                                "content": "",
                                "type": "text/plain"
                            },
                            "key": "Connection",
                            "value": ""
                        },
                        {
                            "key": "Content-Type",
                            "value": "application/json; charset=utf-8"
                        }
                    ],
                    "cookie": [],
                    "responseTime": null,
                    "body": "{\n \"status\": \"success\",\n \"firstName\": \"Benjamin\",\n \"lastName\": \"Smith\",\n \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b7\"\n}"
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "id": "12da26a7-df4d-402b-8134-de23a7a40c58",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "id": "c2294604-fd81-4973-803f-222898bc38d5",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ],
    "variable": [
        {
            "id": "0cc82c3a-4c59-41fc-a695-35bcf834981f",
            "key": "baseUrl",
            "value": "https://81cfad21-ff8a-41a7-976c-3b9eb0d6ad6c.mock.pstmn.io",
            "type": "string"
        }
    ]
}
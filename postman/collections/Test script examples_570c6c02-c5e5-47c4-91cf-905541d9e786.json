{
    "info": {
        "_postman_id": "27e2d000-40e9-4dab-8189-a8d7bd0ca9e6",
        "name": "Test script examples",
        "description": "From the Postman Docs: [Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n> Read the documentation on the right side of each request. Look under the **Tests** tab of the request to see the test script examples. Hit **Send**, and inspect the **Test Results** on the bottom.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Getting started with tests",
            "item": [
                {
                    "name": "Getting started with tests",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "82e02a32-52c6-4d68-9305-9d37af811dbb",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {\r",
                                    "  pm.response.to.have.status(200);\r",
                                    "});\r",
                                    "\r",
                                    "pm.test(\"Status code is 200\", function () {\r",
                                    "  pm.response.to.have.status(200);\r",
                                    "});\r",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "3b502739-a326-4cf2-85d5-e4bc7d9e7925",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ]
                        },
                        "description": "To try writing a test script for the first time, open a request in your Postman app and open the **Tests** tab. Enter the following JavaScript code:\n\n```\npm.test(\"Status code is 200\", function () {\n  pm.response.to.have.status(200);\n});\n```\n\nThis code uses the `pm` library to run the `test` method. The text string will appear in the test output. The function inside the test represents an assertion. Postman tests can use [Chai Assertion Library BDD](https://www.chaijs.com/api/bdd/) syntax, which provides options to optimize how readable your tests are to you and your collaborators. In this case, the code uses BDD chains `to.have` to express the assertion.\n\nThis test checks the response code returned by the API. If the response code is `200`, the test will pass, otherwise it will fail. Click **Send** and check the **Test Results** output in the response area.\n\nTry changing the status code in the assertion code and running again to see how test results appear differently when they pass or fail.\n\nYou can structure your test assertions in a variety of ways to suit your logic and preference in terms of how you want the results to output. The following code is an alternative way of achieving the same test as the one above using the `expect` syntax:\n\n```\npm.test(\"Status code is 200\", () => {\n  pm.expect(pm.response.code).to.eql(200);\n});\n```\n> Refer to the [Chai Docs](https://www.chaijs.com/api/bdd/) for a complete overview of assertion syntax options."
                    },
                    "response": []
                },
                {
                    "name": "Using multiple assertions",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "82e02a32-52c6-4d68-9305-9d37af811dbb",
                                "exec": [
                                    "pm.test(\"The response has all properties\", () => {\r",
                                    "    //parse the response json and test three properties\r",
                                    "    const responseJson = pm.response.json();\r",
                                    "    pm.expect(responseJson.form.type).to.eql('vip');\r",
                                    "    pm.expect(responseJson.form.name).to.be.a('string');\r",
                                    "    pm.expect(responseJson.form.id).to.have.lengthOf(1);\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "d532d3bf-5afe-4079-a407-233c0ebcdbe8",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "name",
                                    "value": "Melania Trump",
                                    "type": "text"
                                },
                                {
                                    "key": "type",
                                    "value": "vip",
                                    "type": "text"
                                },
                                {
                                    "key": "id",
                                    "value": "5",
                                    "type": "text"
                                }
                            ]
                        },
                        "url": {
                            "raw": "https://postman-echo.com/post",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "post"
                            ]
                        },
                        "description": "Your tests can include multiple assertions as part of a single testâ€”you can use this to group together related assertions.\n\n```\npm.test(\"The response has all properties\", () => {\n    //parse the response json and test three properties\n    const responseJson = pm.response.json();\n    pm.expect(responseJson.type).to.eql('vip');\n    pm.expect(responseJson.name).to.be.a('string');\n    pm.expect(responseJson.id).to.have.lengthOf(1);\n});\n```\n\nIf any of the contained assertions fails, the test as a whole will fail. All assertions must be successful for the test to pass."
                    },
                    "response": []
                },
                {
                    "name": "Parsing response body data",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "82e02a32-52c6-4d68-9305-9d37af811dbb",
                                "exec": [
                                    "const responseJson = pm.response.json();\r",
                                    "\r",
                                    "// see examples of parsing other data in the documentation"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "08517406-d690-43c7-a388-f319fb8775e5",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ]
                        },
                        "description": "In order to carry out assertions on your responses, you will first need to parse the data into a JavaScript object that your assertions can use.\n\nTo parse JSON data, use the following syntax:\n```\nconst responseJson = pm.response.json();\n```\n\nTo parse XML, use the following:\n```\nconst responseJson = xml2Json(pm.response.text());\n```\n> If you're dealing with complex XML responses you may find [console logging](https://learning.postman.com/docs/sending-requests/troubleshooting-api-requests/#using-the-console) useful.\n\nTo parse CSV, use the [CSV parse](https://github.com/adaltas/node-csv-parse) utility:\n```\nconst parse = require('csv-parse/lib/sync');\nconst responseJson = parse(pm.response.text());\n```\n\nTo parse HTML, you can use [cheerio](https://cheerio.js.org/):\n```\nconst $ = cheerio.load(pm.response.text());\n//output the html for testing\nconsole.log($.html());\n```"
                    },
                    "response": []
                },
                {
                    "name": "Handling responses that don't parse",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "82e02a32-52c6-4d68-9305-9d37af811dbb",
                                "exec": [
                                    "pm.test(\"Body contains string\",() => {\r",
                                    "  pm.expect(pm.response.text()).to.include(\"customer_id\");\r",
                                    "});\r",
                                    "\r",
                                    "pm.test(\"Body is string\", function () {\r",
                                    "  pm.response.to.have.body(\"whole-body-text\");\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "b3d41650-8960-4df2-bb97-a2d0656e1134",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get?customer_id=6",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ],
                            "query": [
                                {
                                    "key": "customer_id",
                                    "value": "6",
                                    "type": "text"
                                }
                            ]
                        },
                        "description": "If you cannot parse the response body to JavaScript because it's not formatted as JSON, XML, HTML, CSV, or any other parsable data format, you can still make assertions on the data.\n\nYou can test if the response body contains a string:\n\n```\npm.test(\"Body contains string\",() => {\n  pm.expect(pm.response.text()).to.include(\"customer_id\");\n});\n```\n\nThis does not tell you where the string was encountered because it carries out the test on the whole response body. You can also test if a response matches a string (which will typically only be effective with short responses):\n\n```\npm.test(\"Body is string\", function () {\n  pm.response.to.have.body(\"whole-body-text\");\n});\n```"
                    },
                    "response": []
                }
            ],
            "id": "3a5b7e34-f1d5-4006-aad7-63f1a5e30c2f"
        },
        {
            "name": "Making assertions on the HTTP response",
            "item": [
                {
                    "name": "Testing response body",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "82e02a32-52c6-4d68-9305-9d37af811dbb",
                                "exec": [
                                    "pm.test(\"Person is Jane\", () => {\r",
                                    "  const responseJson = pm.response.json();\r",
                                    "  pm.expect(responseJson.form.name).to.eql(\"Jane\");\r",
                                    "  pm.expect(responseJson.form.age).to.eql(23);\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "d8485df5-04b9-4a6c-a2f0-fde5f36e00ed",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "name",
                                    "value": "Jane",
                                    "type": "text"
                                },
                                {
                                    "key": "age",
                                    "value": "21",
                                    "type": "text"
                                }
                            ]
                        },
                        "url": {
                            "raw": "https://postman-echo.com/post",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "post"
                            ]
                        },
                        "description": "You can check for particular values in the response body:\n\n```\npm.test(\"Person is Jane\", () => {\n  const responseJson = pm.response.json();\n  pm.expect(responseJson.form.name).to.eql(\"Jane\");\n  pm.expect(responseJson.form.age).to.eql(23);\n});\n```"
                    },
                    "response": []
                },
                {
                    "name": "Testing status codes",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "82e02a32-52c6-4d68-9305-9d37af811dbb",
                                "exec": [
                                    "pm.test(\"Status code is 201\", () => {\r",
                                    "  pm.response.to.have.status(201);\r",
                                    "});\r",
                                    "\r",
                                    "pm.test(\"Successful POST request\", () => {\r",
                                    "  pm.expect(pm.response.code).to.be.oneOf([201,202]);\r",
                                    "});\r",
                                    "\r",
                                    "pm.test(\"Status code name has string\", () => {\r",
                                    "  pm.response.to.have.status(\"Created\");\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "e04c4e73-f66a-4e1d-8a18-673756bc6e16",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/post",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "post"
                            ]
                        },
                        "description": "You can test for the response status code:\n\n```\npm.test(\"Status code is 201\", () => {\n  pm.response.to.have.status(201);\n});\n```\n\nIf you want to test for the status code being one of a set, you can include them all in an array and use `oneOf`:\n\n```\npm.test(\"Successful POST request\", () => {\n  pm.expect(pm.response.code).to.be.oneOf([201,202]);\n});\n```\n\nYou can also check the status code text:\n\n```\npm.test(\"Status code name has string\", () => {\n  pm.response.to.have.status(\"Created\");\n});\n```"
                    },
                    "response": []
                },
                {
                    "name": "Testing headers",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "82e02a32-52c6-4d68-9305-9d37af811dbb",
                                "exec": [
                                    "pm.test(\"Content-Type header is present\", () => {\r",
                                    "  pm.response.to.have.header(\"Content-Type\");\r",
                                    "});\r",
                                    "\r",
                                    "pm.test(\"Content-Type header is application/json\", () => {\r",
                                    "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "e991d8da-93e6-42cc-a213-b7e76a52e5e1",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/post",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "post"
                            ]
                        },
                        "description": "You can check that a response header is present:\n\n```\npm.test(\"Content-Type header is present\", () => {\n  pm.response.to.have.header(\"Content-Type\");\n});\n```\n\nYou can also test for a response header having a particular value:\n\n```\npm.test(\"Content-Type header is application/json\", () => {\n  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\n});\n```"
                    },
                    "response": []
                },
                {
                    "name": "Testing cookies",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "82e02a32-52c6-4d68-9305-9d37af811dbb",
                                "exec": [
                                    "pm.test(\"Cookie JSESSIONID is present\", () => {\r",
                                    "  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\r",
                                    "});\r",
                                    "\r",
                                    "pm.test(\"Cookie isLoggedIn has value 1\", () => {\r",
                                    "  pm.expect(pm.cookies.get('isLoggedIn')).to.eql('1');\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "3f2926c1-6496-4b9f-833d-9f669be04777",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/post",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "post"
                            ]
                        },
                        "description": "You can test whether a cookie is present in the response:\n\n```\npm.test(\"Cookie JSESSIONID is present\", () => {\n  pm.expect(pm.cookies.has('JSESSIONID')).to.be.true;\n});\n```\n\nYou can also test for a particular cookie value:\n\n\n```\npm.test(\"Cookie isLoggedIn has value 1\", () => {\n  pm.expect(pm.cookies.get('isLoggedIn')).to.eql('1');\n});\n```"
                    },
                    "response": []
                },
                {
                    "name": "Testing response times",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "82e02a32-52c6-4d68-9305-9d37af811dbb",
                                "exec": [
                                    "pm.test(\"Response time is less than 200ms\", () => {\r",
                                    "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "f0710d96-5edf-485a-862f-7f3d85536984",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/post",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "post"
                            ]
                        },
                        "description": "You can test for the response time to be within a specified range:\n\n\n```\npm.test(\"Response time is less than 200ms\", () => {\n  pm.expect(pm.response.responseTime).to.be.below(200);\n});\n```"
                    },
                    "response": []
                }
            ],
            "id": "2ff8713b-dd11-4f23-bb54-051f73324ffc",
            "description": "Your tests can check various aspects of a request response, including the body, status codes, headers, cookies, response times, and more."
        },
        {
            "name": "Common assertion examples",
            "item": [
                {
                    "name": "Asserting a response value against a variable",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4d349e14-3b68-4659-9b46-52a3f2a8ddba",
                                "exec": [
                                    "pm.test(\"Response property matches environment variable\", function () {\r",
                                    "  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "eea905dd-a01d-4d82-bcbe-efb18048efcb",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ]
                        },
                        "description": "You can check whether a response property has the same value as a variable (in this case an environment variable).\n\n```\npm.test(\"Response property matches environment variable\", function () {\n  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\n});\n```\n\n> See [Using Variables](https://learning.postman.com/docs/sending-requests/variables/) for an overview of operations you can use to manipulate variables in your scripts."
                    },
                    "response": []
                },
                {
                    "name": "Asserting a value type",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4d349e14-3b68-4659-9b46-52a3f2a8ddba",
                                "exec": [
                                    "/* response has this structure:\r",
                                    "{\r",
                                    "  \"name\": \"Jane\",\r",
                                    "  \"age\": 29,\r",
                                    "  \"hobbies\": [\r",
                                    "    \"skating\",\r",
                                    "    \"painting\"\r",
                                    "  ],\r",
                                    "  \"email\": null\r",
                                    "}\r",
                                    "*/\r",
                                    "const jsonData = pm.response.json();\r",
                                    "pm.test(\"Test data type of the response\", () => {\r",
                                    "  pm.expect(jsonData).to.be.an(\"object\");\r",
                                    "  pm.expect(jsonData.name).to.be.a(\"string\");\r",
                                    "  pm.expect(jsonData.age).to.be.a(\"number\");\r",
                                    "  pm.expect(jsonData.hobbies).to.be.an(\"array\");\r",
                                    "  pm.expect(jsonData.website).to.be.undefined;\r",
                                    "  pm.expect(jsonData.email).to.be.null;\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "82fe8876-11d6-4ab7-bcda-2a95a8eeb5be",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{mockBaseUrl}}/jane",
                            "host": [
                                "{{mockBaseUrl}}"
                            ],
                            "path": [
                                "jane"
                            ]
                        },
                        "description": "You can test the type of any part of the response.\n\n```\n/* response has this structure:\n{\n  \"name\": \"Jane\",\n  \"age\": 29,\n  \"hobbies\": [\n    \"skating\",\n    \"painting\"\n  ],\n  \"email\": null\n}\n*/\nconst jsonData = pm.response.json();\npm.test(\"Test data type of the response\", () => {\n  pm.expect(jsonData).to.be.an(\"object\");\n  pm.expect(jsonData.name).to.be.a(\"string\");\n  pm.expect(jsonData.age).to.be.a(\"number\");\n  pm.expect(jsonData.hobbies).to.be.an(\"array\");\n  pm.expect(jsonData.website).to.be.undefined;\n  pm.expect(jsonData.email).to.be.null;\n});\n```"
                    },
                    "response": [
                        {
                            "id": "ac469163-1eb9-4d92-8170-758e01da939a",
                            "name": "Asserting a value type",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{mockBaseUrl}}/jane",
                                    "host": [
                                        "{{mockBaseUrl}}"
                                    ],
                                    "path": [
                                        "jane"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": null,
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\r\n  \"name\": \"Jane\",\r\n  \"age\": 29,\r\n  \"hobbies\": [\r\n    \"skating\",\r\n    \"painting\"\r\n  ],\r\n  \"email\": null\r\n}"
                        }
                    ]
                },
                {
                    "name": "Asserting array properties",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4d349e14-3b68-4659-9b46-52a3f2a8ddba",
                                "exec": [
                                    "/*\r",
                                    "response has this structure:\r",
                                    "{\r",
                                    "  \"errors\": [],\r",
                                    "  \"areas\": [ \"goods\", \"services\" ],\r",
                                    "  \"settings\": [\r",
                                    "    {\r",
                                    "      \"type\": \"notification\",\r",
                                    "      \"detail\": [ \"email\", \"sms\" ]\r",
                                    "    },\r",
                                    "    {\r",
                                    "      \"type\": \"visual\",\r",
                                    "      \"detail\": [ \"light\", \"large\" ]\r",
                                    "    }\r",
                                    "  ]\r",
                                    "}\r",
                                    "*/\r",
                                    "\r",
                                    "const jsonData = pm.response.json();\r",
                                    "pm.test(\"Test array properties\", () => {\r",
                                    "    //errors array is empty\r",
                                    "  pm.expect(jsonData.errors).to.be.empty;\r",
                                    "    //areas includes \"goods\"\r",
                                    "  pm.expect(jsonData.areas).to.include(\"goods\");\r",
                                    "    //get the notification settings object\r",
                                    "  const notificationSettings = jsonData.settings.find\r",
                                    "      (m => m.type === \"notification\");\r",
                                    "  pm.expect(notificationSettings)\r",
                                    "    .to.be.an(\"object\", \"Could not find the setting\");\r",
                                    "    //detail array should include \"sms\"\r",
                                    "\r",
                                    "pm.expect(notificationSettings.detail).to.include(\"sms\");\r",
                                    "    //detail array should include all listed\r",
                                    "  pm.expect(notificationSettings.detail)\r",
                                    "    .to.have.members([\"email\", \"sms\"]);\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "c6e27243-7281-4644-b5fb-7c43232a1620",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{mockBaseUrl}}/goods",
                            "host": [
                                "{{mockBaseUrl}}"
                            ],
                            "path": [
                                "goods"
                            ]
                        },
                        "description": "You can check whether an array is empty or not, and whether it contains particular items.\n\n```\n/*\nresponse has this structure:\n{\n  \"errors\": [],\n  \"areas\": [ \"goods\", \"services\" ],\n  \"settings\": [\n    {\n      \"type\": \"notification\",\n      \"detail\": [ \"email\", \"sms\" ]\n    },\n    {\n      \"type\": \"visual\",\n      \"detail\": [ \"light\", \"large\" ]\n    }\n  ]\n}\n*/\n\nconst jsonData = pm.response.json();\npm.test(\"Test array properties\", () => {\n    //errors array is empty\n  pm.expect(jsonData.errors).to.be.empty;\n    //areas includes \"goods\"\n  pm.expect(jsonData.areas).to.include(\"goods\");\n    //get the notification settings object\n  const notificationSettings = jsonData.settings.find\n      (m => m.type === \"notification\");\n  pm.expect(notificationSettings)\n    .to.be.an(\"object\", \"Could not find the setting\");\n    //detail array should include \"sms\"\n\npm.expect(notificationSettings.detail).to.include(\"sms\");\n    //detail array should include all listed\n  pm.expect(notificationSettings.detail)\n    .to.have.members([\"email\", \"sms\"]);\n});\n```\n\n> The order in `.members` does not affect the test."
                    },
                    "response": [
                        {
                            "id": "bce2e8d6-e0f6-486c-ba29-f5735b127881",
                            "name": "Asserting array properties",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{mockBaseUrl}}/goods",
                                    "host": [
                                        "{{mockBaseUrl}}"
                                    ],
                                    "path": [
                                        "goods"
                                    ]
                                }
                            },
                            "status": "OK",
                            "code": 200,
                            "_postman_previewlanguage": "json",
                            "header": null,
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\r\n  \"errors\": [],\r\n  \"areas\": [ \"goods\", \"services\" ],\r\n  \"settings\": [\r\n    {\r\n      \"type\": \"notification\",\r\n      \"detail\": [ \"email\", \"sms\" ]\r\n    },\r\n    {\r\n      \"type\": \"visual\",\r\n      \"detail\": [ \"light\", \"large\" ]\r\n    }\r\n  ]\r\n}"
                        }
                    ]
                },
                {
                    "name": "Asserting object properties",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4d349e14-3b68-4659-9b46-52a3f2a8ddba",
                                "exec": [
                                    "pm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\r",
                                    "pm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\r",
                                    "pm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\r",
                                    "pm.expect({a: 1}).to.have.property('a');\r",
                                    "pm.expect({a: 1, b: 2}).to.be.an('object')\r",
                                    "  .that.has.all.keys('a', 'b');"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "60caf3d4-3d4b-4375-a270-40ef21e2b58a",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ]
                        },
                        "description": "You can assert that an object contains keys or properties.\n\n```\npm.expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\npm.expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\npm.expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\npm.expect({a: 1}).to.have.property('a');\npm.expect({a: 1, b: 2}).to.be.an('object')\n  .that.has.all.keys('a', 'b');\n```\n\n> Target can be an `object`, `set`, `array` or `map`. If `.keys` is run without `.all` or `.any`, the expression defaults to `.all`. As `.keys` behavior varies based on the target `type`, it's recommended to check the `type` before using `.keys` with `.a`."
                    },
                    "response": []
                },
                {
                    "name": "Asserting that a value is in a set",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4d349e14-3b68-4659-9b46-52a3f2a8ddba",
                                "exec": [
                                    "pm.test(\"Value is in valid list\", () => {\r",
                                    "  pm.expect(pm.response.json().type)\r",
                                    "    .to.be.oneOf([\"Subscriber\", \"Customer\", \"User\"]);\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "594ffd0c-5c24-4142-ac66-d8fadfbab12b",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ]
                        },
                        "description": "You can check a response value against a list of valid options.\n\n```\npm.test(\"Value is in valid list\", () => {\n  pm.expect(pm.response.json().type)\n    .to.be.oneOf([\"Subscriber\", \"Customer\", \"User\"]);\n});\n```"
                    },
                    "response": []
                },
                {
                    "name": "Asserting that an object is contained",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4d349e14-3b68-4659-9b46-52a3f2a8ddba",
                                "exec": [
                                    "/*\r",
                                    "response has the following structure:\r",
                                    "{\r",
                                    "  \"id\": \"d8893057-3e91-4cdd-a36f-a0af460b6373\",\r",
                                    "  \"created\": true,\r",
                                    "  \"errors\": []\r",
                                    "}\r",
                                    "*/\r",
                                    "\r",
                                    "pm.test(\"Object is contained\", () => {\r",
                                    "  const expectedObject = {\r",
                                    "    \"created\": true,\r",
                                    "    \"errors\": []\r",
                                    "  };\r",
                                    "  pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "fb397bf3-943f-4ab1-a3d7-9c853f7c220f",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{mockBaseUrl}}/created",
                            "host": [
                                "{{mockBaseUrl}}"
                            ],
                            "path": [
                                "created"
                            ]
                        },
                        "description": "You can check that an object is part of a parent object.\n\n```\n/*\nresponse has the following structure:\n{\n  \"id\": \"d8893057-3e91-4cdd-a36f-a0af460b6373\",\n  \"created\": true,\n  \"errors\": []\n}\n*/\n\npm.test(\"Object is contained\", () => {\n  const expectedObject = {\n    \"created\": true,\n    \"errors\": []\n  };\n  pm.expect(pm.response.json()).to.deep.include(expectedObject);\n});\n```\n\n> Using `.deep` causes all `.equal`, `.include`, `.members`, `.keys`, and `.property` assertions that follow in the chain to use deep equality (loose equality) instead of strict (===) equality. While the `.eql` also compares loosely, `.deep.equal` causes deep equality comparisons to also be used for any other assertions that follow in the chain, while `.eql` does not."
                    },
                    "response": [
                        {
                            "id": "dea6d38e-4577-4401-8945-f90b3f5aa955",
                            "name": "Asserting that an object is contained",
                            "originalRequest": {
                                "method": "GET",
                                "header": [],
                                "url": {
                                    "raw": "{{mockBaseUrl}}/created",
                                    "host": [
                                        "{{mockBaseUrl}}"
                                    ],
                                    "path": [
                                        "created"
                                    ]
                                }
                            },
                            "status": "Created",
                            "code": 201,
                            "_postman_previewlanguage": "json",
                            "header": null,
                            "cookie": [],
                            "responseTime": null,
                            "body": "{\r\n  \"id\": \"d8893057-3e91-4cdd-a36f-a0af460b6373\",\r\n  \"created\": true,\r\n  \"errors\": []\r\n}"
                        }
                    ]
                },
                {
                    "name": "Asserting the current environment",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4d349e14-3b68-4659-9b46-52a3f2a8ddba",
                                "exec": [
                                    "pm.test(\"Check the active environment\", () => {\r",
                                    "  pm.expect(pm.environment.name).to.eql(\"Production\");\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "af4edf45-f22f-4fc6-b089-318f92b1b4a3",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ]
                        },
                        "description": "You can check the active (currently selected) environment in Postman.\n\n```\npm.test(\"Check the active environment\", () => {\n  pm.expect(pm.environment.name).to.eql(\"Production\");\n});\n```"
                    },
                    "response": []
                }
            ],
            "id": "ebd510ab-993a-4145-b993-a22975e871fc",
            "description": "Read on for some examples of common assertions you might find useful in your scripts, either as they are outlined below or by editing the detail to suit your own needs.\n\n> For a more comprehensive overview of what you can include in your assertions, refer to the [Chai Docs](https://www.chaijs.com/api/bdd/)."
        },
        {
            "name": "Troubleshooting common test errors",
            "item": [
                {
                    "name": "Console",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "5ea14791-266f-429e-8caa-0eee818dfaa5",
                                "exec": [
                                    "console.log(pm.collectionVariables.get(\"name\"));\r",
                                    "console.log(pm.response.json().name);\r",
                                    "\r",
                                    "console.log(typeof pm.response.json().id);\r",
                                    "\r",
                                    "if (pm.response.json().id) {\r",
                                    "  console.log(\"id was found!\");\r",
                                    "  // do something\r",
                                    "} else {\r",
                                    "  console.log(\"no id ...\");\r",
                                    "  //do something else\r",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "bcc93218-6527-4f2a-ba59-83daade68c57",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ]
                        },
                        "description": "When you encounter errors or unexpected behavior in your test scripts, the Postman [Console](https://learning.postman.com/docs/sending-requests/troubleshooting-api-requests/) can help you to identify the source. By combining `console.log` debug statements with your test assertions, you can examine the content of the HTTP requests and responses, as well as Postman data items such as variables.\n\n![[console](https://assets.postman.com/postman-docs/console-logs-in-pane.jpg)](https://assets.postman.com/postman-docs/console-logs-in-pane.jpg)\n\nClick **Console** at the bottom left of Postman to open it.\n\nYou can log the value of a variable or response property:\n\n```\nconsole.log(pm.collectionVariables.get(\"name\"));\nconsole.log(pm.response.json().name);\n```\n\nYou can log the type of a variable or response property:\n\n```\nconsole.log(typeof pm.response.json().id);\n```\n\nYou can generally use console logs to mark code execution, sometimes known as \"trace statements\":\n\n```\nif (pm.response.json().id) {\n  console.log(\"id was found!\");\n  // do something\n} else {\n  console.log(\"no id ...\");\n  //do something else\n}\n```"
                    },
                    "response": []
                },
                {
                    "name": "Assertion deep equality error",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "5ea14791-266f-429e-8caa-0eee818dfaa5",
                                "exec": [
                                    "pm.expect(1).to.eql(\"1\");"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "d1da3ff2-778e-4438-973c-fa72af315254",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ]
                        },
                        "description": "You may encounter the `AssertionError: expected <value> to deeply equal '<value>'`. For example, this would arise with the following code:\n\n```\npm.expect(1).to.eql(\"1\");\n```\nThis happens because the test is comparing a number to a string value. The test will only return true if both the type and value are equal."
                    },
                    "response": []
                },
                {
                    "name": "JSON not defined error",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "5ea14791-266f-429e-8caa-0eee818dfaa5",
                                "exec": [
                                    "pm.test(\"Test 1\", () => {\r",
                                    "  const jsonData = pm.response.json();\r",
                                    "  pm.expect(jsonData.form.name).to.eql(\"John\");\r",
                                    "});\r",
                                    "\r",
                                    "pm.test(\"Test 2\", () => {\r",
                                    "  pm.expect(jsonData.form.age).to.eql(29); // jsonData is not defined\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "d7195867-5fed-41b7-a015-240fbd99238d",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "name",
                                    "value": "John",
                                    "type": "text"
                                },
                                {
                                    "key": "age",
                                    "value": "29",
                                    "type": "text"
                                }
                            ]
                        },
                        "url": {
                            "raw": "https://postman-echo.com/post",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "post"
                            ]
                        },
                        "description": "You may encounter the `ReferenceError: jsonData is not defined` issue. This typically happens when you are attempting to reference a JSON object that has not been declared or is outside the scope of your test code.\n\n```\npm.test(\"Test 1\", () => {\n  const jsonData = pm.response.json();\n  pm.expect(jsonData.name).to.eql(\"John\");\n});\n\npm.test(\"Test 2\", () => {\n  pm.expect(jsonData.age).to.eql(29); // jsonData is not defined\n});\n```\nMake sure that any code setting your response data to a variable is accessible to all test code, for example in this case moving `const jsonData = pm.response.json();` to before the first `pm.test` would make it available to both test functions."
                    },
                    "response": []
                },
                {
                    "name": "Assertion undefined error",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4d349e14-3b68-4659-9b46-52a3f2a8ddba",
                                "exec": [
                                    "pm.expect(jsonData.form.name).to.eql(\"John\");\r",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "980bb723-5798-4a9c-8834-e09490df1a3f",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "POST",
                        "header": [],
                        "body": {
                            "mode": "formdata",
                            "formdata": [
                                {
                                    "key": "name",
                                    "value": "John",
                                    "type": "text"
                                }
                            ]
                        },
                        "url": {
                            "raw": "https://postman-echo.com/post",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "post"
                            ]
                        },
                        "description": "You may encounter the `AssertionError: expected undefined to deeply equal..` issue. Typically this happens when you are referring to a property that does not exist or is out of scope.\n\n```\npm.expect(jsonData.name).to.eql(\"John\");\n```\n\nIn the above example, if you see `AssertionError: expected undefined to deeply equal 'John'`, this indicates that the `name` property is not defined in the `jsonData` object."
                    },
                    "response": []
                },
                {
                    "name": "Test not failing",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4d349e14-3b68-4659-9b46-52a3f2a8ddba",
                                "exec": [
                                    "//test function not properly defined - missing second parameter\r",
                                    "pm.test(\"Not failing\", function () {\r",
                                    "    pm.expect(true).to.eql(false);\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "1e0be88a-b421-480a-afa1-f66fb3303394",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ]
                        },
                        "description": "There may be occasions where you expect a test to fail and it doesn't.\n\n```\n//test function not properly defined - missing second parameter\npm.test(\"Not failing\", function () {\n    pm.expect(true).to.eql(false);\n});\n```\nMake sure your test code is syntactically correct and try sending your request again."
                    },
                    "response": []
                }
            ],
            "id": "9b2ab0e1-487a-46aa-8790-42e8f71fe826"
        },
        {
            "name": "More examples",
            "item": [
                {
                    "name": "Validating response structure",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4d349e14-3b68-4659-9b46-52a3f2a8ddba",
                                "exec": [
                                    "const schema = {\r",
                                    " \"items\": {\r",
                                    " \"type\": \"boolean\"\r",
                                    " }\r",
                                    "};\r",
                                    "const data1 = [true, false];\r",
                                    "const data2 = [true, 123];\r",
                                    "\r",
                                    "pm.test('Schema is valid', function() {\r",
                                    "  pm.expect(tv4.validate(data1, schema)).to.be.true;\r",
                                    "  pm.expect(tv4.validate(data2, schema)).to.be.true;\r",
                                    "});\r",
                                    "\r",
                                    "const schema2 = {\r",
                                    "  \"properties\": {\r",
                                    "    \"alpha\": {\r",
                                    "      \"type\": \"boolean\"\r",
                                    "    }\r",
                                    "  }\r",
                                    "};\r",
                                    "pm.test('Schema 2 is valid', function() {\r",
                                    "  pm.response.to.have.jsonSchema(schema2);\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "314bc85b-aea3-48cb-8bd8-81a823e2027e",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ]
                        },
                        "description": "You can carry out JSON schema validation with tv4.\n\n```\nconst schema = {\n \"items\": {\n \"type\": \"boolean\"\n }\n};\nconst data1 = [true, false];\nconst data2 = [true, 123];\n\npm.test('Schema is valid', function() {\n  pm.expect(tv4.validate(data1, schema)).to.be.true;\n  pm.expect(tv4.validate(data2, schema)).to.be.true;\n});\n```\nYou can also validate JSON schema with ajv by default.\n\n```\nconst schema = {\n  \"properties\": {\n    \"alpha\": {\n      \"type\": \"boolean\"\n    }\n  }\n};\npm.test('Schema is valid', function() {\n  pm.response.to.have.jsonSchema(schema);\n});\n```"
                    },
                    "response": []
                },
                {
                    "name": "Sending an asynchronous request",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4d349e14-3b68-4659-9b46-52a3f2a8ddba",
                                "exec": [
                                    "pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
                                    "    console.log(response.json());\r",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "a1d98b84-51d0-4c44-805e-7cc15e22e01e",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ]
                        },
                        "description": "You can send a request from your tests code and log the response.\n\n```\npm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\n    console.log(response.json());\n});\n```"
                    },
                    "response": []
                },
                {
                    "name": "Older style of writing Postman tests (deprecated)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "4d349e14-3b68-4659-9b46-52a3f2a8ddba",
                                "exec": [
                                    "//set an environment variable\r",
                                    "postman.setEnvironmentVariable(\"key\", \"value\");\r",
                                    "\r",
                                    "//set a nested object as an environment variable\r",
                                    "const array = [1, 2, 3, 4];\r",
                                    "postman.setEnvironmentVariable(\"array\", JSON.stringify(array, null, 2));\r",
                                    "const obj = { a: [1, 2, 3, 4], b: { c: 'val' } };\r",
                                    "postman.setEnvironmentVariable(\"obj\", JSON.stringify(obj));\r",
                                    "\r",
                                    "//get an environment variable\r",
                                    "postman.getEnvironmentVariable(\"key\");\r",
                                    "\r",
                                    "//get an environment variable whose value is a stringified object\r",
                                    "//(wrap in a try-catch block if the data is coming from an unknown source)\r",
                                    "const array = JSON.parse(postman.getEnvironmentVariable(\"array\"));\r",
                                    "const obj = JSON.parse(postman.getEnvironmentVariable(\"obj\"));\r",
                                    "\r",
                                    "//clear an environment variable\r",
                                    "postman.clearEnvironmentVariable(\"key\");\r",
                                    "\r",
                                    "//set a global variable\r",
                                    "postman.setGlobalVariable(\"key\", \"value\");\r",
                                    "\r",
                                    "//get a global variable\r",
                                    "postman.getGlobalVariable(\"key\");\r",
                                    "\r",
                                    "//clear a global variable\r",
                                    "postman.clearGlobalVariable(\"key\");\r",
                                    "\r",
                                    "//check if response body contains a string\r",
                                    "tests[\"Body matches string\"] = responseBody.has(\"string_you_want_to_search\");\r",
                                    "\r",
                                    "//check if response body is equal to a string\r",
                                    "tests[\"Body is correct\"] = responseBody === \"response_body_string\";\r",
                                    "\r",
                                    "//check for a JSON value\r",
                                    "const data = JSON.parse(responseBody);\r",
                                    "tests[\"Your test name\"] = data.value === 100;\r",
                                    "\r",
                                    "//Content-Type is present (Case-insensitive checking)\r",
                                    "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
                                    "tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\r",
                                    "//getResponseHeader() method returns the header value, if it exists\r",
                                    "\r",
                                    "//Content-Type is present (Case-sensitive)\r",
                                    "tests[\"Content-Type is present\"] = responseHeaders.hasOwnProperty(\"Content-Type\");\r",
                                    "\r",
                                    "//response time is less than 200ms\r",
                                    "tests[\"Response time is less than 200ms\"] = responseTime < 200;\r",
                                    "\r",
                                    "//response time is within a specific range\r",
                                    "//(lower bound inclusive, upper bound exclusive)\r",
                                    "tests[\"Response time is acceptable\"] = _.inRange(responseTime, 100, 1001);\r",
                                    "\r",
                                    "//status code is 200\r",
                                    "tests[\"Status code is 200\"] = responseCode.code === 200;\r",
                                    "\r",
                                    "//code name contains a string\r",
                                    "tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");\r",
                                    "\r",
                                    "//successful POST request status code\r",
                                    "tests[\"Successful POST request\"] = responseCode.code === 201 || responseCode.code === 202;"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "id": "eeef4b6d-8afe-4ca3-8939-e8c31397dc9c",
                    "protocolProfileBehavior": {
                        "disableBodyPruning": true
                    },
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "https://postman-echo.com/get",
                            "protocol": "https",
                            "host": [
                                "postman-echo",
                                "com"
                            ],
                            "path": [
                                "get"
                            ]
                        },
                        "description": "> This section refers to deprecated script syntax used in older versions of Postman. If you are writing scripts now, please use the newer syntax.\n\nThe older style of writing Postman tests relies on setting values for the `tests` object. You can set a descriptive key for an element in the object and then assert if it's true or false. For example, the following will check whether the response body contains the `user_id` string:\n\n```\ntests[\"Body contains user_id\"] = responsebody.has(\"user_id\");\n```\nYou can add as many keys as needed, depending on how many things you want to test for. You can view your test results in the response viewer under the **Tests** tab. The tab header shows how many tests passed, and the keys that you set in the tests variable are listed there. If the value evaluates to true, the test passed."
                    },
                    "response": []
                }
            ],
            "id": "c39e1ad5-024f-4f84-9446-f07e00babb3e"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "id": "987ea1d4-4c16-4c79-8389-130ce774d23a",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "id": "2fc6bad5-f425-4285-bf58-04ef7f7e514f",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ],
    "variable": [
        {
            "id": "9de9a9d8-3e58-413a-be37-32eb2142a3f8",
            "key": "mockBaseUrl",
            "value": "https://533c269c-fb94-4044-86e6-82273df3a022.mock.pstmn.io"
        }
    ]
}